
F103_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002120  080026d0  080026d0  000126d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f0  080047f0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080047f0  080047f0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047f0  080047f0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f0  080047f0  000147f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047f4  080047f4  000147f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080047f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  2000001c  08004814  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08004814  00020498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006dd1  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001691  00000000  00000000  00026e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a8  00000000  00000000  000284f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005dd  00000000  00000000  00028c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e26  00000000  00000000  00029275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009846  00000000  00000000  0004009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082430  00000000  00000000  000498e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ee4  00000000  00000000  000cbd14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000cdbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026b8 	.word	0x080026b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080026b8 	.word	0x080026b8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fd5d 	bl	8000c10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f88d 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8ff 	bl	800035c <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8cf 	bl	8000300 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	// reference: https://www.micropeta.com/video19

	SSD1306_Init();
 8000162:	f000 f9cd 	bl	8000500 <SSD1306_Init>
	char snum[5];

	SSD1306_GotoXY (0,0);
 8000166:	2100      	movs	r1, #0
 8000168:	2000      	movs	r0, #0
 800016a:	f000 fb31 	bl	80007d0 <SSD1306_GotoXY>
	SSD1306_Puts ("AHMAD", &Font_11x18, 1);
 800016e:	2201      	movs	r2, #1
 8000170:	493a      	ldr	r1, [pc, #232]	; (800025c <main+0x110>)
 8000172:	483b      	ldr	r0, [pc, #236]	; (8000260 <main+0x114>)
 8000174:	f000 fbc2 	bl	80008fc <SSD1306_Puts>
	SSD1306_GotoXY (0, 30);
 8000178:	211e      	movs	r1, #30
 800017a:	2000      	movs	r0, #0
 800017c:	f000 fb28 	bl	80007d0 <SSD1306_GotoXY>
	SSD1306_Puts ("SAYUTI", &Font_11x18, 1);
 8000180:	2201      	movs	r2, #1
 8000182:	4936      	ldr	r1, [pc, #216]	; (800025c <main+0x110>)
 8000184:	4837      	ldr	r0, [pc, #220]	; (8000264 <main+0x118>)
 8000186:	f000 fbb9 	bl	80008fc <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800018a:	f000 fa7d 	bl	8000688 <SSD1306_UpdateScreen>
	HAL_Delay (1000);
 800018e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000192:	f000 fd9f 	bl	8000cd4 <HAL_Delay>

	SSD1306_ScrollRight(0,7);
 8000196:	2107      	movs	r1, #7
 8000198:	2000      	movs	r0, #0
 800019a:	f000 f93c 	bl	8000416 <SSD1306_ScrollRight>
	HAL_Delay(3000);
 800019e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001a2:	f000 fd97 	bl	8000cd4 <HAL_Delay>
	SSD1306_ScrollLeft(0,7);
 80001a6:	2107      	movs	r1, #7
 80001a8:	2000      	movs	r0, #0
 80001aa:	f000 f96a 	bl	8000482 <SSD1306_ScrollLeft>
	HAL_Delay(3000);
 80001ae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001b2:	f000 fd8f 	bl	8000cd4 <HAL_Delay>
	SSD1306_Stopscroll();
 80001b6:	f000 f99a 	bl	80004ee <SSD1306_Stopscroll>
	SSD1306_Clear();
 80001ba:	f000 fbc4 	bl	8000946 <SSD1306_Clear>
	SSD1306_GotoXY (35,0);
 80001be:	2100      	movs	r1, #0
 80001c0:	2023      	movs	r0, #35	; 0x23
 80001c2:	f000 fb05 	bl	80007d0 <SSD1306_GotoXY>
	SSD1306_Puts ("SCORE", &Font_11x18, 1);
 80001c6:	2201      	movs	r2, #1
 80001c8:	4924      	ldr	r1, [pc, #144]	; (800025c <main+0x110>)
 80001ca:	4827      	ldr	r0, [pc, #156]	; (8000268 <main+0x11c>)
 80001cc:	f000 fb96 	bl	80008fc <SSD1306_Puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		for ( int x = 1; x <= 10000 ; x++ )
 80001d0:	2301      	movs	r3, #1
 80001d2:	60fb      	str	r3, [r7, #12]
 80001d4:	e03c      	b.n	8000250 <main+0x104>
		{
			itoa(x, snum, 10);
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	220a      	movs	r2, #10
 80001da:	4619      	mov	r1, r3
 80001dc:	68f8      	ldr	r0, [r7, #12]
 80001de:	f002 f9fb 	bl	80025d8 <itoa>
			SSD1306_GotoXY (0, 30);
 80001e2:	211e      	movs	r1, #30
 80001e4:	2000      	movs	r0, #0
 80001e6:	f000 faf3 	bl	80007d0 <SSD1306_GotoXY>
			SSD1306_Puts ("             ", &Font_16x26, 1);
 80001ea:	2201      	movs	r2, #1
 80001ec:	491f      	ldr	r1, [pc, #124]	; (800026c <main+0x120>)
 80001ee:	4820      	ldr	r0, [pc, #128]	; (8000270 <main+0x124>)
 80001f0:	f000 fb84 	bl	80008fc <SSD1306_Puts>
			SSD1306_UpdateScreen();
 80001f4:	f000 fa48 	bl	8000688 <SSD1306_UpdateScreen>
			if(x < 10) {
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	2b09      	cmp	r3, #9
 80001fc:	dc04      	bgt.n	8000208 <main+0xbc>
				SSD1306_GotoXY (53, 30);  // 1 DIGIT
 80001fe:	211e      	movs	r1, #30
 8000200:	2035      	movs	r0, #53	; 0x35
 8000202:	f000 fae5 	bl	80007d0 <SSD1306_GotoXY>
 8000206:	e014      	b.n	8000232 <main+0xe6>
			}
			else if (x < 100 ) {
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	2b63      	cmp	r3, #99	; 0x63
 800020c:	dc04      	bgt.n	8000218 <main+0xcc>
				SSD1306_GotoXY (45, 30);  // 2 DIGITS
 800020e:	211e      	movs	r1, #30
 8000210:	202d      	movs	r0, #45	; 0x2d
 8000212:	f000 fadd 	bl	80007d0 <SSD1306_GotoXY>
 8000216:	e00c      	b.n	8000232 <main+0xe6>
			}
			else if (x < 1000 ) {
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800021e:	da04      	bge.n	800022a <main+0xde>
				SSD1306_GotoXY (37, 30);  // 3 DIGITS
 8000220:	211e      	movs	r1, #30
 8000222:	2025      	movs	r0, #37	; 0x25
 8000224:	f000 fad4 	bl	80007d0 <SSD1306_GotoXY>
 8000228:	e003      	b.n	8000232 <main+0xe6>
			}
			else {
				SSD1306_GotoXY (30, 30);  // 4 DIGIS
 800022a:	211e      	movs	r1, #30
 800022c:	201e      	movs	r0, #30
 800022e:	f000 facf 	bl	80007d0 <SSD1306_GotoXY>
			}
			SSD1306_Puts (snum, &Font_16x26, 1);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2201      	movs	r2, #1
 8000236:	490d      	ldr	r1, [pc, #52]	; (800026c <main+0x120>)
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fb5f 	bl	80008fc <SSD1306_Puts>
			SSD1306_UpdateScreen();
 800023e:	f000 fa23 	bl	8000688 <SSD1306_UpdateScreen>
			HAL_Delay (500);
 8000242:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000246:	f000 fd45 	bl	8000cd4 <HAL_Delay>
		for ( int x = 1; x <= 10000 ; x++ )
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	3301      	adds	r3, #1
 800024e:	60fb      	str	r3, [r7, #12]
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	f242 7210 	movw	r2, #10000	; 0x2710
 8000256:	4293      	cmp	r3, r2
 8000258:	ddbd      	ble.n	80001d6 <main+0x8a>
 800025a:	e7b9      	b.n	80001d0 <main+0x84>
 800025c:	20000000 	.word	0x20000000
 8000260:	080026d0 	.word	0x080026d0
 8000264:	080026d8 	.word	0x080026d8
 8000268:	080026e0 	.word	0x080026e0
 800026c:	20000008 	.word	0x20000008
 8000270:	080026e8 	.word	0x080026e8

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b090      	sub	sp, #64	; 0x40
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	2228      	movs	r2, #40	; 0x28
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f002 f9ec 	bl	8002660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000296:	2301      	movs	r3, #1
 8000298:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800029a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a4:	2301      	movs	r3, #1
 80002a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a8:	2302      	movs	r3, #2
 80002aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b8:	f107 0318 	add.w	r3, r7, #24
 80002bc:	4618      	mov	r0, r3
 80002be:	f001 fd77 	bl	8001db0 <HAL_RCC_OscConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002c8:	f000 f8a0 	bl	800040c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002cc:	230f      	movs	r3, #15
 80002ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d0:	2302      	movs	r3, #2
 80002d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2102      	movs	r1, #2
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 ffe4 	bl	80022b4 <HAL_RCC_ClockConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002f2:	f000 f88b 	bl	800040c <Error_Handler>
  }
}
 80002f6:	bf00      	nop
 80002f8:	3740      	adds	r7, #64	; 0x40
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
	...

08000300 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_I2C1_Init+0x50>)
 8000306:	4a13      	ldr	r2, [pc, #76]	; (8000354 <MX_I2C1_Init+0x54>)
 8000308:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800030a:	4b11      	ldr	r3, [pc, #68]	; (8000350 <MX_I2C1_Init+0x50>)
 800030c:	4a12      	ldr	r2, [pc, #72]	; (8000358 <MX_I2C1_Init+0x58>)
 800030e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000310:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <MX_I2C1_Init+0x50>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <MX_I2C1_Init+0x50>)
 8000318:	2200      	movs	r2, #0
 800031a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <MX_I2C1_Init+0x50>)
 800031e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000322:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000324:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <MX_I2C1_Init+0x50>)
 8000326:	2200      	movs	r2, #0
 8000328:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <MX_I2C1_Init+0x50>)
 800032c:	2200      	movs	r2, #0
 800032e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000330:	4b07      	ldr	r3, [pc, #28]	; (8000350 <MX_I2C1_Init+0x50>)
 8000332:	2200      	movs	r2, #0
 8000334:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <MX_I2C1_Init+0x50>)
 8000338:	2200      	movs	r2, #0
 800033a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800033c:	4804      	ldr	r0, [pc, #16]	; (8000350 <MX_I2C1_Init+0x50>)
 800033e:	f000 ff6d 	bl	800121c <HAL_I2C_Init>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000348:	f000 f860 	bl	800040c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800034c:	bf00      	nop
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000038 	.word	0x20000038
 8000354:	40005400 	.word	0x40005400
 8000358:	00061a80 	.word	0x00061a80

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000370:	4b24      	ldr	r3, [pc, #144]	; (8000404 <MX_GPIO_Init+0xa8>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a23      	ldr	r2, [pc, #140]	; (8000404 <MX_GPIO_Init+0xa8>)
 8000376:	f043 0310 	orr.w	r3, r3, #16
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <MX_GPIO_Init+0xa8>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0310 	and.w	r3, r3, #16
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000388:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <MX_GPIO_Init+0xa8>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a1d      	ldr	r2, [pc, #116]	; (8000404 <MX_GPIO_Init+0xa8>)
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <MX_GPIO_Init+0xa8>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0320 	and.w	r3, r3, #32
 800039c:	60bb      	str	r3, [r7, #8]
 800039e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a0:	4b18      	ldr	r3, [pc, #96]	; (8000404 <MX_GPIO_Init+0xa8>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a17      	ldr	r2, [pc, #92]	; (8000404 <MX_GPIO_Init+0xa8>)
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b15      	ldr	r3, [pc, #84]	; (8000404 <MX_GPIO_Init+0xa8>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0304 	and.w	r3, r3, #4
 80003b4:	607b      	str	r3, [r7, #4]
 80003b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <MX_GPIO_Init+0xa8>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	4a11      	ldr	r2, [pc, #68]	; (8000404 <MX_GPIO_Init+0xa8>)
 80003be:	f043 0308 	orr.w	r3, r3, #8
 80003c2:	6193      	str	r3, [r2, #24]
 80003c4:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <MX_GPIO_Init+0xa8>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f003 0308 	and.w	r3, r3, #8
 80003cc:	603b      	str	r3, [r7, #0]
 80003ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d6:	480c      	ldr	r0, [pc, #48]	; (8000408 <MX_GPIO_Init+0xac>)
 80003d8:	f000 ff08 	bl	80011ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e2:	2301      	movs	r3, #1
 80003e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ea:	2302      	movs	r3, #2
 80003ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	4619      	mov	r1, r3
 80003f4:	4804      	ldr	r0, [pc, #16]	; (8000408 <MX_GPIO_Init+0xac>)
 80003f6:	f000 fd75 	bl	8000ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003fa:	bf00      	nop
 80003fc:	3720      	adds	r7, #32
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40021000 	.word	0x40021000
 8000408:	40011000 	.word	0x40011000

0800040c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000410:	b672      	cpsid	i
}
 8000412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000414:	e7fe      	b.n	8000414 <Error_Handler+0x8>

08000416 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b082      	sub	sp, #8
 800041a:	af00      	add	r7, sp, #0
 800041c:	4603      	mov	r3, r0
 800041e:	460a      	mov	r2, r1
 8000420:	71fb      	strb	r3, [r7, #7]
 8000422:	4613      	mov	r3, r2
 8000424:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8000426:	2226      	movs	r2, #38	; 0x26
 8000428:	2100      	movs	r1, #0
 800042a:	2078      	movs	r0, #120	; 0x78
 800042c:	f000 fb0e 	bl	8000a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8000430:	2200      	movs	r2, #0
 8000432:	2100      	movs	r1, #0
 8000434:	2078      	movs	r0, #120	; 0x78
 8000436:	f000 fb09 	bl	8000a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800043a:	79fb      	ldrb	r3, [r7, #7]
 800043c:	461a      	mov	r2, r3
 800043e:	2100      	movs	r1, #0
 8000440:	2078      	movs	r0, #120	; 0x78
 8000442:	f000 fb03 	bl	8000a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8000446:	2200      	movs	r2, #0
 8000448:	2100      	movs	r1, #0
 800044a:	2078      	movs	r0, #120	; 0x78
 800044c:	f000 fafe 	bl	8000a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8000450:	79bb      	ldrb	r3, [r7, #6]
 8000452:	461a      	mov	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	2078      	movs	r0, #120	; 0x78
 8000458:	f000 faf8 	bl	8000a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 800045c:	2200      	movs	r2, #0
 800045e:	2100      	movs	r1, #0
 8000460:	2078      	movs	r0, #120	; 0x78
 8000462:	f000 faf3 	bl	8000a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8000466:	22ff      	movs	r2, #255	; 0xff
 8000468:	2100      	movs	r1, #0
 800046a:	2078      	movs	r0, #120	; 0x78
 800046c:	f000 faee 	bl	8000a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000470:	222f      	movs	r2, #47	; 0x2f
 8000472:	2100      	movs	r1, #0
 8000474:	2078      	movs	r0, #120	; 0x78
 8000476:	f000 fae9 	bl	8000a4c <ssd1306_I2C_Write>
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	4603      	mov	r3, r0
 800048a:	460a      	mov	r2, r1
 800048c:	71fb      	strb	r3, [r7, #7]
 800048e:	4613      	mov	r3, r2
 8000490:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8000492:	2227      	movs	r2, #39	; 0x27
 8000494:	2100      	movs	r1, #0
 8000496:	2078      	movs	r0, #120	; 0x78
 8000498:	f000 fad8 	bl	8000a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800049c:	2200      	movs	r2, #0
 800049e:	2100      	movs	r1, #0
 80004a0:	2078      	movs	r0, #120	; 0x78
 80004a2:	f000 fad3 	bl	8000a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	461a      	mov	r2, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	2078      	movs	r0, #120	; 0x78
 80004ae:	f000 facd 	bl	8000a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80004b2:	2200      	movs	r2, #0
 80004b4:	2100      	movs	r1, #0
 80004b6:	2078      	movs	r0, #120	; 0x78
 80004b8:	f000 fac8 	bl	8000a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80004bc:	79bb      	ldrb	r3, [r7, #6]
 80004be:	461a      	mov	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	2078      	movs	r0, #120	; 0x78
 80004c4:	f000 fac2 	bl	8000a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2100      	movs	r1, #0
 80004cc:	2078      	movs	r0, #120	; 0x78
 80004ce:	f000 fabd 	bl	8000a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80004d2:	22ff      	movs	r2, #255	; 0xff
 80004d4:	2100      	movs	r1, #0
 80004d6:	2078      	movs	r0, #120	; 0x78
 80004d8:	f000 fab8 	bl	8000a4c <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80004dc:	222f      	movs	r2, #47	; 0x2f
 80004de:	2100      	movs	r1, #0
 80004e0:	2078      	movs	r0, #120	; 0x78
 80004e2:	f000 fab3 	bl	8000a4c <ssd1306_I2C_Write>
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80004f2:	222e      	movs	r2, #46	; 0x2e
 80004f4:	2100      	movs	r1, #0
 80004f6:	2078      	movs	r0, #120	; 0x78
 80004f8:	f000 faa8 	bl	8000a4c <ssd1306_I2C_Write>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000506:	f000 fa27 	bl	8000958 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800050a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800050e:	2201      	movs	r2, #1
 8000510:	2178      	movs	r1, #120	; 0x78
 8000512:	485b      	ldr	r0, [pc, #364]	; (8000680 <SSD1306_Init+0x180>)
 8000514:	f001 f8c4 	bl	80016a0 <HAL_I2C_IsDeviceReady>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800051e:	2300      	movs	r3, #0
 8000520:	e0a9      	b.n	8000676 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000522:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000526:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000528:	e002      	b.n	8000530 <SSD1306_Init+0x30>
		p--;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3b01      	subs	r3, #1
 800052e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d1f9      	bne.n	800052a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000536:	22ae      	movs	r2, #174	; 0xae
 8000538:	2100      	movs	r1, #0
 800053a:	2078      	movs	r0, #120	; 0x78
 800053c:	f000 fa86 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000540:	2220      	movs	r2, #32
 8000542:	2100      	movs	r1, #0
 8000544:	2078      	movs	r0, #120	; 0x78
 8000546:	f000 fa81 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800054a:	2210      	movs	r2, #16
 800054c:	2100      	movs	r1, #0
 800054e:	2078      	movs	r0, #120	; 0x78
 8000550:	f000 fa7c 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000554:	22b0      	movs	r2, #176	; 0xb0
 8000556:	2100      	movs	r1, #0
 8000558:	2078      	movs	r0, #120	; 0x78
 800055a:	f000 fa77 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800055e:	22c8      	movs	r2, #200	; 0xc8
 8000560:	2100      	movs	r1, #0
 8000562:	2078      	movs	r0, #120	; 0x78
 8000564:	f000 fa72 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000568:	2200      	movs	r2, #0
 800056a:	2100      	movs	r1, #0
 800056c:	2078      	movs	r0, #120	; 0x78
 800056e:	f000 fa6d 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000572:	2210      	movs	r2, #16
 8000574:	2100      	movs	r1, #0
 8000576:	2078      	movs	r0, #120	; 0x78
 8000578:	f000 fa68 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800057c:	2240      	movs	r2, #64	; 0x40
 800057e:	2100      	movs	r1, #0
 8000580:	2078      	movs	r0, #120	; 0x78
 8000582:	f000 fa63 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000586:	2281      	movs	r2, #129	; 0x81
 8000588:	2100      	movs	r1, #0
 800058a:	2078      	movs	r0, #120	; 0x78
 800058c:	f000 fa5e 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000590:	22ff      	movs	r2, #255	; 0xff
 8000592:	2100      	movs	r1, #0
 8000594:	2078      	movs	r0, #120	; 0x78
 8000596:	f000 fa59 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800059a:	22a1      	movs	r2, #161	; 0xa1
 800059c:	2100      	movs	r1, #0
 800059e:	2078      	movs	r0, #120	; 0x78
 80005a0:	f000 fa54 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80005a4:	22a6      	movs	r2, #166	; 0xa6
 80005a6:	2100      	movs	r1, #0
 80005a8:	2078      	movs	r0, #120	; 0x78
 80005aa:	f000 fa4f 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80005ae:	22a8      	movs	r2, #168	; 0xa8
 80005b0:	2100      	movs	r1, #0
 80005b2:	2078      	movs	r0, #120	; 0x78
 80005b4:	f000 fa4a 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80005b8:	223f      	movs	r2, #63	; 0x3f
 80005ba:	2100      	movs	r1, #0
 80005bc:	2078      	movs	r0, #120	; 0x78
 80005be:	f000 fa45 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80005c2:	22a4      	movs	r2, #164	; 0xa4
 80005c4:	2100      	movs	r1, #0
 80005c6:	2078      	movs	r0, #120	; 0x78
 80005c8:	f000 fa40 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80005cc:	22d3      	movs	r2, #211	; 0xd3
 80005ce:	2100      	movs	r1, #0
 80005d0:	2078      	movs	r0, #120	; 0x78
 80005d2:	f000 fa3b 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	2078      	movs	r0, #120	; 0x78
 80005dc:	f000 fa36 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80005e0:	22d5      	movs	r2, #213	; 0xd5
 80005e2:	2100      	movs	r1, #0
 80005e4:	2078      	movs	r0, #120	; 0x78
 80005e6:	f000 fa31 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80005ea:	22f0      	movs	r2, #240	; 0xf0
 80005ec:	2100      	movs	r1, #0
 80005ee:	2078      	movs	r0, #120	; 0x78
 80005f0:	f000 fa2c 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80005f4:	22d9      	movs	r2, #217	; 0xd9
 80005f6:	2100      	movs	r1, #0
 80005f8:	2078      	movs	r0, #120	; 0x78
 80005fa:	f000 fa27 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80005fe:	2222      	movs	r2, #34	; 0x22
 8000600:	2100      	movs	r1, #0
 8000602:	2078      	movs	r0, #120	; 0x78
 8000604:	f000 fa22 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000608:	22da      	movs	r2, #218	; 0xda
 800060a:	2100      	movs	r1, #0
 800060c:	2078      	movs	r0, #120	; 0x78
 800060e:	f000 fa1d 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000612:	2212      	movs	r2, #18
 8000614:	2100      	movs	r1, #0
 8000616:	2078      	movs	r0, #120	; 0x78
 8000618:	f000 fa18 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800061c:	22db      	movs	r2, #219	; 0xdb
 800061e:	2100      	movs	r1, #0
 8000620:	2078      	movs	r0, #120	; 0x78
 8000622:	f000 fa13 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000626:	2220      	movs	r2, #32
 8000628:	2100      	movs	r1, #0
 800062a:	2078      	movs	r0, #120	; 0x78
 800062c:	f000 fa0e 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000630:	228d      	movs	r2, #141	; 0x8d
 8000632:	2100      	movs	r1, #0
 8000634:	2078      	movs	r0, #120	; 0x78
 8000636:	f000 fa09 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800063a:	2214      	movs	r2, #20
 800063c:	2100      	movs	r1, #0
 800063e:	2078      	movs	r0, #120	; 0x78
 8000640:	f000 fa04 	bl	8000a4c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000644:	22af      	movs	r2, #175	; 0xaf
 8000646:	2100      	movs	r1, #0
 8000648:	2078      	movs	r0, #120	; 0x78
 800064a:	f000 f9ff 	bl	8000a4c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800064e:	222e      	movs	r2, #46	; 0x2e
 8000650:	2100      	movs	r1, #0
 8000652:	2078      	movs	r0, #120	; 0x78
 8000654:	f000 f9fa 	bl	8000a4c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000658:	2000      	movs	r0, #0
 800065a:	f000 f843 	bl	80006e4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800065e:	f000 f813 	bl	8000688 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <SSD1306_Init+0x184>)
 8000664:	2200      	movs	r2, #0
 8000666:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <SSD1306_Init+0x184>)
 800066a:	2200      	movs	r2, #0
 800066c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <SSD1306_Init+0x184>)
 8000670:	2201      	movs	r2, #1
 8000672:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000674:	2301      	movs	r3, #1
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000038 	.word	0x20000038
 8000684:	2000048c 	.word	0x2000048c

08000688 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800068e:	2300      	movs	r3, #0
 8000690:	71fb      	strb	r3, [r7, #7]
 8000692:	e01d      	b.n	80006d0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	3b50      	subs	r3, #80	; 0x50
 8000698:	b2db      	uxtb	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	2078      	movs	r0, #120	; 0x78
 80006a0:	f000 f9d4 	bl	8000a4c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2100      	movs	r1, #0
 80006a8:	2078      	movs	r0, #120	; 0x78
 80006aa:	f000 f9cf 	bl	8000a4c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80006ae:	2210      	movs	r2, #16
 80006b0:	2100      	movs	r1, #0
 80006b2:	2078      	movs	r0, #120	; 0x78
 80006b4:	f000 f9ca 	bl	8000a4c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	01db      	lsls	r3, r3, #7
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <SSD1306_UpdateScreen+0x58>)
 80006be:	441a      	add	r2, r3
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	2140      	movs	r1, #64	; 0x40
 80006c4:	2078      	movs	r0, #120	; 0x78
 80006c6:	f000 f95b 	bl	8000980 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	3301      	adds	r3, #1
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	2b07      	cmp	r3, #7
 80006d4:	d9de      	bls.n	8000694 <SSD1306_UpdateScreen+0xc>
	}
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2000008c 	.word	0x2000008c

080006e4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d101      	bne.n	80006f8 <SSD1306_Fill+0x14>
 80006f4:	2300      	movs	r3, #0
 80006f6:	e000      	b.n	80006fa <SSD1306_Fill+0x16>
 80006f8:	23ff      	movs	r3, #255	; 0xff
 80006fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006fe:	4619      	mov	r1, r3
 8000700:	4803      	ldr	r0, [pc, #12]	; (8000710 <SSD1306_Fill+0x2c>)
 8000702:	f001 ffad 	bl	8002660 <memset>
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	2000008c 	.word	0x2000008c

08000714 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	80fb      	strh	r3, [r7, #6]
 800071e:	460b      	mov	r3, r1
 8000720:	80bb      	strh	r3, [r7, #4]
 8000722:	4613      	mov	r3, r2
 8000724:	70fb      	strb	r3, [r7, #3]
	if (
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	2b7f      	cmp	r3, #127	; 0x7f
 800072a:	d848      	bhi.n	80007be <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800072c:	88bb      	ldrh	r3, [r7, #4]
 800072e:	2b3f      	cmp	r3, #63	; 0x3f
 8000730:	d845      	bhi.n	80007be <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <SSD1306_DrawPixel+0xb4>)
 8000734:	791b      	ldrb	r3, [r3, #4]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d006      	beq.n	8000748 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800073a:	78fb      	ldrb	r3, [r7, #3]
 800073c:	2b00      	cmp	r3, #0
 800073e:	bf0c      	ite	eq
 8000740:	2301      	moveq	r3, #1
 8000742:	2300      	movne	r3, #0
 8000744:	b2db      	uxtb	r3, r3
 8000746:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d11a      	bne.n	8000784 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800074e:	88fa      	ldrh	r2, [r7, #6]
 8000750:	88bb      	ldrh	r3, [r7, #4]
 8000752:	08db      	lsrs	r3, r3, #3
 8000754:	b298      	uxth	r0, r3
 8000756:	4603      	mov	r3, r0
 8000758:	01db      	lsls	r3, r3, #7
 800075a:	4413      	add	r3, r2
 800075c:	4a1b      	ldr	r2, [pc, #108]	; (80007cc <SSD1306_DrawPixel+0xb8>)
 800075e:	5cd3      	ldrb	r3, [r2, r3]
 8000760:	b25a      	sxtb	r2, r3
 8000762:	88bb      	ldrh	r3, [r7, #4]
 8000764:	f003 0307 	and.w	r3, r3, #7
 8000768:	2101      	movs	r1, #1
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	b25b      	sxtb	r3, r3
 8000770:	4313      	orrs	r3, r2
 8000772:	b259      	sxtb	r1, r3
 8000774:	88fa      	ldrh	r2, [r7, #6]
 8000776:	4603      	mov	r3, r0
 8000778:	01db      	lsls	r3, r3, #7
 800077a:	4413      	add	r3, r2
 800077c:	b2c9      	uxtb	r1, r1
 800077e:	4a13      	ldr	r2, [pc, #76]	; (80007cc <SSD1306_DrawPixel+0xb8>)
 8000780:	54d1      	strb	r1, [r2, r3]
 8000782:	e01d      	b.n	80007c0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000784:	88fa      	ldrh	r2, [r7, #6]
 8000786:	88bb      	ldrh	r3, [r7, #4]
 8000788:	08db      	lsrs	r3, r3, #3
 800078a:	b298      	uxth	r0, r3
 800078c:	4603      	mov	r3, r0
 800078e:	01db      	lsls	r3, r3, #7
 8000790:	4413      	add	r3, r2
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <SSD1306_DrawPixel+0xb8>)
 8000794:	5cd3      	ldrb	r3, [r2, r3]
 8000796:	b25a      	sxtb	r2, r3
 8000798:	88bb      	ldrh	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	2101      	movs	r1, #1
 80007a0:	fa01 f303 	lsl.w	r3, r1, r3
 80007a4:	b25b      	sxtb	r3, r3
 80007a6:	43db      	mvns	r3, r3
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	4013      	ands	r3, r2
 80007ac:	b259      	sxtb	r1, r3
 80007ae:	88fa      	ldrh	r2, [r7, #6]
 80007b0:	4603      	mov	r3, r0
 80007b2:	01db      	lsls	r3, r3, #7
 80007b4:	4413      	add	r3, r2
 80007b6:	b2c9      	uxtb	r1, r1
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <SSD1306_DrawPixel+0xb8>)
 80007ba:	54d1      	strb	r1, [r2, r3]
 80007bc:	e000      	b.n	80007c0 <SSD1306_DrawPixel+0xac>
		return;
 80007be:	bf00      	nop
	}
}
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr
 80007c8:	2000048c 	.word	0x2000048c
 80007cc:	2000008c 	.word	0x2000008c

080007d0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	460a      	mov	r2, r1
 80007da:	80fb      	strh	r3, [r7, #6]
 80007dc:	4613      	mov	r3, r2
 80007de:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80007e0:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <SSD1306_GotoXY+0x28>)
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80007e6:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <SSD1306_GotoXY+0x28>)
 80007e8:	88bb      	ldrh	r3, [r7, #4]
 80007ea:	8053      	strh	r3, [r2, #2]
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	2000048c 	.word	0x2000048c

080007fc <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	6039      	str	r1, [r7, #0]
 8000806:	71fb      	strb	r3, [r7, #7]
 8000808:	4613      	mov	r3, r2
 800080a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800080c:	4b3a      	ldr	r3, [pc, #232]	; (80008f8 <SSD1306_Putc+0xfc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	461a      	mov	r2, r3
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
	if (
 8000818:	2b7f      	cmp	r3, #127	; 0x7f
 800081a:	dc07      	bgt.n	800082c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800081c:	4b36      	ldr	r3, [pc, #216]	; (80008f8 <SSD1306_Putc+0xfc>)
 800081e:	885b      	ldrh	r3, [r3, #2]
 8000820:	461a      	mov	r2, r3
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	785b      	ldrb	r3, [r3, #1]
 8000826:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000828:	2b3f      	cmp	r3, #63	; 0x3f
 800082a:	dd01      	ble.n	8000830 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800082c:	2300      	movs	r3, #0
 800082e:	e05e      	b.n	80008ee <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	e04b      	b.n	80008ce <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	3b20      	subs	r3, #32
 800083e:	6839      	ldr	r1, [r7, #0]
 8000840:	7849      	ldrb	r1, [r1, #1]
 8000842:	fb01 f303 	mul.w	r3, r1, r3
 8000846:	4619      	mov	r1, r3
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	440b      	add	r3, r1
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	4413      	add	r3, r2
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000854:	2300      	movs	r3, #0
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	e030      	b.n	80008bc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	693b      	ldr	r3, [r7, #16]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000866:	2b00      	cmp	r3, #0
 8000868:	d010      	beq.n	800088c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800086a:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <SSD1306_Putc+0xfc>)
 800086c:	881a      	ldrh	r2, [r3, #0]
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	b29b      	uxth	r3, r3
 8000872:	4413      	add	r3, r2
 8000874:	b298      	uxth	r0, r3
 8000876:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <SSD1306_Putc+0xfc>)
 8000878:	885a      	ldrh	r2, [r3, #2]
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	b29b      	uxth	r3, r3
 800087e:	4413      	add	r3, r2
 8000880:	b29b      	uxth	r3, r3
 8000882:	79ba      	ldrb	r2, [r7, #6]
 8000884:	4619      	mov	r1, r3
 8000886:	f7ff ff45 	bl	8000714 <SSD1306_DrawPixel>
 800088a:	e014      	b.n	80008b6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800088c:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <SSD1306_Putc+0xfc>)
 800088e:	881a      	ldrh	r2, [r3, #0]
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	b29b      	uxth	r3, r3
 8000894:	4413      	add	r3, r2
 8000896:	b298      	uxth	r0, r3
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <SSD1306_Putc+0xfc>)
 800089a:	885a      	ldrh	r2, [r3, #2]
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	4413      	add	r3, r2
 80008a2:	b299      	uxth	r1, r3
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	bf0c      	ite	eq
 80008aa:	2301      	moveq	r3, #1
 80008ac:	2300      	movne	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	461a      	mov	r2, r3
 80008b2:	f7ff ff2f 	bl	8000714 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	3301      	adds	r3, #1
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	461a      	mov	r2, r3
 80008c2:	693b      	ldr	r3, [r7, #16]
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d3c8      	bcc.n	800085a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	3301      	adds	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	785b      	ldrb	r3, [r3, #1]
 80008d2:	461a      	mov	r2, r3
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d3ad      	bcc.n	8000836 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80008da:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <SSD1306_Putc+0xfc>)
 80008dc:	881a      	ldrh	r2, [r3, #0]
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	4413      	add	r3, r2
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	4b03      	ldr	r3, [pc, #12]	; (80008f8 <SSD1306_Putc+0xfc>)
 80008ea:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80008ec:	79fb      	ldrb	r3, [r7, #7]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	2000048c 	.word	0x2000048c

080008fc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	4613      	mov	r3, r2
 8000908:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800090a:	e012      	b.n	8000932 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	79fa      	ldrb	r2, [r7, #7]
 8000912:	68b9      	ldr	r1, [r7, #8]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff71 	bl	80007fc <SSD1306_Putc>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	429a      	cmp	r2, r3
 8000924:	d002      	beq.n	800092c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	e008      	b.n	800093e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3301      	adds	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1e8      	bne.n	800090c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	781b      	ldrb	r3, [r3, #0]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff feca 	bl	80006e4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000950:	f7ff fe9a 	bl	8000688 <SSD1306_UpdateScreen>
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <ssd1306_I2C_Init+0x24>)
 8000960:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000962:	e002      	b.n	800096a <ssd1306_I2C_Init+0x12>
		p--;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	607b      	str	r3, [r7, #4]
	while(p>0)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d1f9      	bne.n	8000964 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000970:	bf00      	nop
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	0003d090 	.word	0x0003d090

08000980 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b0c7      	sub	sp, #284	; 0x11c
 8000984:	af02      	add	r7, sp, #8
 8000986:	4604      	mov	r4, r0
 8000988:	4608      	mov	r0, r1
 800098a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800098e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000992:	600a      	str	r2, [r1, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800099a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800099e:	4622      	mov	r2, r4
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009a6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80009aa:	4602      	mov	r2, r0
 80009ac:	701a      	strb	r2, [r3, #0]
 80009ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80009b6:	460a      	mov	r2, r1
 80009b8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80009ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80009c2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009c6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80009ca:	7812      	ldrb	r2, [r2, #0]
 80009cc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80009d4:	e015      	b.n	8000a02 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80009d6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009da:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009de:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80009e2:	6812      	ldr	r2, [r2, #0]
 80009e4:	441a      	add	r2, r3
 80009e6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009ea:	3301      	adds	r3, #1
 80009ec:	7811      	ldrb	r1, [r2, #0]
 80009ee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009f2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80009f6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80009f8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80009fc:	3301      	adds	r3, #1
 80009fe:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000a02:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000a0c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000a10:	8812      	ldrh	r2, [r2, #0]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d8df      	bhi.n	80009d6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000a16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a1a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b299      	uxth	r1, r3
 8000a22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000a26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	f107 020c 	add.w	r2, r7, #12
 8000a34:	200a      	movs	r0, #10
 8000a36:	9000      	str	r0, [sp, #0]
 8000a38:	4803      	ldr	r0, [pc, #12]	; (8000a48 <ssd1306_I2C_WriteMulti+0xc8>)
 8000a3a:	f000 fd33 	bl	80014a4 <HAL_I2C_Master_Transmit>
}
 8000a3e:	bf00      	nop
 8000a40:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	20000038 	.word	0x20000038

08000a4c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
 8000a56:	460b      	mov	r3, r1
 8000a58:	71bb      	strb	r3, [r7, #6]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000a5e:	79bb      	ldrb	r3, [r7, #6]
 8000a60:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000a62:	797b      	ldrb	r3, [r7, #5]
 8000a64:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	b299      	uxth	r1, r3
 8000a6a:	f107 020c 	add.w	r2, r7, #12
 8000a6e:	230a      	movs	r3, #10
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	2302      	movs	r3, #2
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <ssd1306_I2C_Write+0x38>)
 8000a76:	f000 fd15 	bl	80014a4 <HAL_I2C_Master_Transmit>
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000038 	.word	0x20000038

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6193      	str	r3, [r2, #24]
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	61d3      	str	r3, [r2, #28]
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <HAL_MspInit+0x60>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_MspInit+0x60>)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010000 	.word	0x40010000

08000aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b088      	sub	sp, #32
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a15      	ldr	r2, [pc, #84]	; (8000b5c <HAL_I2C_MspInit+0x70>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d123      	bne.n	8000b54 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_I2C_MspInit+0x74>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a13      	ldr	r2, [pc, #76]	; (8000b60 <HAL_I2C_MspInit+0x74>)
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_I2C_MspInit+0x74>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0308 	and.w	r3, r3, #8
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b24:	23c0      	movs	r3, #192	; 0xc0
 8000b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b28:	2312      	movs	r3, #18
 8000b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	4619      	mov	r1, r3
 8000b36:	480b      	ldr	r0, [pc, #44]	; (8000b64 <HAL_I2C_MspInit+0x78>)
 8000b38:	f000 f9d4 	bl	8000ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_I2C_MspInit+0x74>)
 8000b3e:	69db      	ldr	r3, [r3, #28]
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_I2C_MspInit+0x74>)
 8000b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b46:	61d3      	str	r3, [r2, #28]
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_I2C_MspInit+0x74>)
 8000b4a:	69db      	ldr	r3, [r3, #28]
 8000b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40010c00 	.word	0x40010c00

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <MemManage_Handler+0x4>

08000b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr

08000b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr

08000baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bae:	f000 f875 	bl	8000c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
	...

08000bc4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc4:	f7ff fff7 	bl	8000bb6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480b      	ldr	r0, [pc, #44]	; (8000bf8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bca:	490c      	ldr	r1, [pc, #48]	; (8000bfc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bcc:	4a0c      	ldr	r2, [pc, #48]	; (8000c00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000be0:	4c09      	ldr	r4, [pc, #36]	; (8000c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bee:	f001 fd3f 	bl	8002670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bf2:	f7ff faab 	bl	800014c <main>
  bx lr
 8000bf6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000c00:	080047f8 	.word	0x080047f8
  ldr r2, =_sbss
 8000c04:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000c08:	20000498 	.word	0x20000498

08000c0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC1_2_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_Init+0x28>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_Init+0x28>)
 8000c1a:	f043 0310 	orr.w	r3, r3, #16
 8000c1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c20:	2003      	movs	r0, #3
 8000c22:	f000 f92b 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c26:	200f      	movs	r0, #15
 8000c28:	f000 f808 	bl	8000c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2c:	f7ff ff2c 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40022000 	.word	0x40022000

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x54>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_InitTick+0x58>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f935 	bl	8000eca <HAL_SYSTICK_Config>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00e      	b.n	8000c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2b0f      	cmp	r3, #15
 8000c6e:	d80a      	bhi.n	8000c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c70:	2200      	movs	r2, #0
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c78:	f000 f90b 	bl	8000e92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c7c:	4a06      	ldr	r2, [pc, #24]	; (8000c98 <HAL_InitTick+0x5c>)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e000      	b.n	8000c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000010 	.word	0x20000010
 8000c94:	20000018 	.word	0x20000018
 8000c98:	20000014 	.word	0x20000014

08000c9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <HAL_IncTick+0x1c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <HAL_IncTick+0x20>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a03      	ldr	r2, [pc, #12]	; (8000cbc <HAL_IncTick+0x20>)
 8000cae:	6013      	str	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	20000018 	.word	0x20000018
 8000cbc:	20000494 	.word	0x20000494

08000cc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b02      	ldr	r3, [pc, #8]	; (8000cd0 <HAL_GetTick+0x10>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr
 8000cd0:	20000494 	.word	0x20000494

08000cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cdc:	f7ff fff0 	bl	8000cc0 <HAL_GetTick>
 8000ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cec:	d005      	beq.n	8000cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_Delay+0x44>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cfa:	bf00      	nop
 8000cfc:	f7ff ffe0 	bl	8000cc0 <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d8f7      	bhi.n	8000cfc <HAL_Delay+0x28>
  {
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000018 	.word	0x20000018

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	; (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e5c:	f7ff ff90 	bl	8000d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff49 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff5e 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff90 	bl	8000dd4 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5f 	bl	8000d80 <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffb0 	bl	8000e38 <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b08b      	sub	sp, #44	; 0x2c
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef6:	e169      	b.n	80011cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	f040 8158 	bne.w	80011c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	4a9a      	ldr	r2, [pc, #616]	; (8001184 <HAL_GPIO_Init+0x2a0>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d05e      	beq.n	8000fde <HAL_GPIO_Init+0xfa>
 8000f20:	4a98      	ldr	r2, [pc, #608]	; (8001184 <HAL_GPIO_Init+0x2a0>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d875      	bhi.n	8001012 <HAL_GPIO_Init+0x12e>
 8000f26:	4a98      	ldr	r2, [pc, #608]	; (8001188 <HAL_GPIO_Init+0x2a4>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d058      	beq.n	8000fde <HAL_GPIO_Init+0xfa>
 8000f2c:	4a96      	ldr	r2, [pc, #600]	; (8001188 <HAL_GPIO_Init+0x2a4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d86f      	bhi.n	8001012 <HAL_GPIO_Init+0x12e>
 8000f32:	4a96      	ldr	r2, [pc, #600]	; (800118c <HAL_GPIO_Init+0x2a8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d052      	beq.n	8000fde <HAL_GPIO_Init+0xfa>
 8000f38:	4a94      	ldr	r2, [pc, #592]	; (800118c <HAL_GPIO_Init+0x2a8>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d869      	bhi.n	8001012 <HAL_GPIO_Init+0x12e>
 8000f3e:	4a94      	ldr	r2, [pc, #592]	; (8001190 <HAL_GPIO_Init+0x2ac>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d04c      	beq.n	8000fde <HAL_GPIO_Init+0xfa>
 8000f44:	4a92      	ldr	r2, [pc, #584]	; (8001190 <HAL_GPIO_Init+0x2ac>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d863      	bhi.n	8001012 <HAL_GPIO_Init+0x12e>
 8000f4a:	4a92      	ldr	r2, [pc, #584]	; (8001194 <HAL_GPIO_Init+0x2b0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d046      	beq.n	8000fde <HAL_GPIO_Init+0xfa>
 8000f50:	4a90      	ldr	r2, [pc, #576]	; (8001194 <HAL_GPIO_Init+0x2b0>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d85d      	bhi.n	8001012 <HAL_GPIO_Init+0x12e>
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d82a      	bhi.n	8000fb0 <HAL_GPIO_Init+0xcc>
 8000f5a:	2b12      	cmp	r3, #18
 8000f5c:	d859      	bhi.n	8001012 <HAL_GPIO_Init+0x12e>
 8000f5e:	a201      	add	r2, pc, #4	; (adr r2, 8000f64 <HAL_GPIO_Init+0x80>)
 8000f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f64:	08000fdf 	.word	0x08000fdf
 8000f68:	08000fb9 	.word	0x08000fb9
 8000f6c:	08000fcb 	.word	0x08000fcb
 8000f70:	0800100d 	.word	0x0800100d
 8000f74:	08001013 	.word	0x08001013
 8000f78:	08001013 	.word	0x08001013
 8000f7c:	08001013 	.word	0x08001013
 8000f80:	08001013 	.word	0x08001013
 8000f84:	08001013 	.word	0x08001013
 8000f88:	08001013 	.word	0x08001013
 8000f8c:	08001013 	.word	0x08001013
 8000f90:	08001013 	.word	0x08001013
 8000f94:	08001013 	.word	0x08001013
 8000f98:	08001013 	.word	0x08001013
 8000f9c:	08001013 	.word	0x08001013
 8000fa0:	08001013 	.word	0x08001013
 8000fa4:	08001013 	.word	0x08001013
 8000fa8:	08000fc1 	.word	0x08000fc1
 8000fac:	08000fd5 	.word	0x08000fd5
 8000fb0:	4a79      	ldr	r2, [pc, #484]	; (8001198 <HAL_GPIO_Init+0x2b4>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d013      	beq.n	8000fde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fb6:	e02c      	b.n	8001012 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	623b      	str	r3, [r7, #32]
          break;
 8000fbe:	e029      	b.n	8001014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	623b      	str	r3, [r7, #32]
          break;
 8000fc8:	e024      	b.n	8001014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	3308      	adds	r3, #8
 8000fd0:	623b      	str	r3, [r7, #32]
          break;
 8000fd2:	e01f      	b.n	8001014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	330c      	adds	r3, #12
 8000fda:	623b      	str	r3, [r7, #32]
          break;
 8000fdc:	e01a      	b.n	8001014 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d102      	bne.n	8000fec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	623b      	str	r3, [r7, #32]
          break;
 8000fea:	e013      	b.n	8001014 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d105      	bne.n	8001000 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	611a      	str	r2, [r3, #16]
          break;
 8000ffe:	e009      	b.n	8001014 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001000:	2308      	movs	r3, #8
 8001002:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69fa      	ldr	r2, [r7, #28]
 8001008:	615a      	str	r2, [r3, #20]
          break;
 800100a:	e003      	b.n	8001014 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
          break;
 8001010:	e000      	b.n	8001014 <HAL_GPIO_Init+0x130>
          break;
 8001012:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	2bff      	cmp	r3, #255	; 0xff
 8001018:	d801      	bhi.n	800101e <HAL_GPIO_Init+0x13a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	e001      	b.n	8001022 <HAL_GPIO_Init+0x13e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	3304      	adds	r3, #4
 8001022:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	2bff      	cmp	r3, #255	; 0xff
 8001028:	d802      	bhi.n	8001030 <HAL_GPIO_Init+0x14c>
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	e002      	b.n	8001036 <HAL_GPIO_Init+0x152>
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	3b08      	subs	r3, #8
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	210f      	movs	r1, #15
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	401a      	ands	r2, r3
 8001048:	6a39      	ldr	r1, [r7, #32]
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	431a      	orrs	r2, r3
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 80b1 	beq.w	80011c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001064:	4b4d      	ldr	r3, [pc, #308]	; (800119c <HAL_GPIO_Init+0x2b8>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a4c      	ldr	r2, [pc, #304]	; (800119c <HAL_GPIO_Init+0x2b8>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b4a      	ldr	r3, [pc, #296]	; (800119c <HAL_GPIO_Init+0x2b8>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800107c:	4a48      	ldr	r2, [pc, #288]	; (80011a0 <HAL_GPIO_Init+0x2bc>)
 800107e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3302      	adds	r3, #2
 8001084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001088:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	220f      	movs	r2, #15
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	4013      	ands	r3, r2
 800109e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a40      	ldr	r2, [pc, #256]	; (80011a4 <HAL_GPIO_Init+0x2c0>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d013      	beq.n	80010d0 <HAL_GPIO_Init+0x1ec>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a3f      	ldr	r2, [pc, #252]	; (80011a8 <HAL_GPIO_Init+0x2c4>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d00d      	beq.n	80010cc <HAL_GPIO_Init+0x1e8>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a3e      	ldr	r2, [pc, #248]	; (80011ac <HAL_GPIO_Init+0x2c8>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d007      	beq.n	80010c8 <HAL_GPIO_Init+0x1e4>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a3d      	ldr	r2, [pc, #244]	; (80011b0 <HAL_GPIO_Init+0x2cc>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d101      	bne.n	80010c4 <HAL_GPIO_Init+0x1e0>
 80010c0:	2303      	movs	r3, #3
 80010c2:	e006      	b.n	80010d2 <HAL_GPIO_Init+0x1ee>
 80010c4:	2304      	movs	r3, #4
 80010c6:	e004      	b.n	80010d2 <HAL_GPIO_Init+0x1ee>
 80010c8:	2302      	movs	r3, #2
 80010ca:	e002      	b.n	80010d2 <HAL_GPIO_Init+0x1ee>
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <HAL_GPIO_Init+0x1ee>
 80010d0:	2300      	movs	r3, #0
 80010d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d4:	f002 0203 	and.w	r2, r2, #3
 80010d8:	0092      	lsls	r2, r2, #2
 80010da:	4093      	lsls	r3, r2
 80010dc:	68fa      	ldr	r2, [r7, #12]
 80010de:	4313      	orrs	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010e2:	492f      	ldr	r1, [pc, #188]	; (80011a0 <HAL_GPIO_Init+0x2bc>)
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3302      	adds	r3, #2
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010fc:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <HAL_GPIO_Init+0x2d0>)
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	492c      	ldr	r1, [pc, #176]	; (80011b4 <HAL_GPIO_Init+0x2d0>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	608b      	str	r3, [r1, #8]
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800110a:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <HAL_GPIO_Init+0x2d0>)
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	43db      	mvns	r3, r3
 8001112:	4928      	ldr	r1, [pc, #160]	; (80011b4 <HAL_GPIO_Init+0x2d0>)
 8001114:	4013      	ands	r3, r2
 8001116:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <HAL_GPIO_Init+0x2d0>)
 8001126:	68da      	ldr	r2, [r3, #12]
 8001128:	4922      	ldr	r1, [pc, #136]	; (80011b4 <HAL_GPIO_Init+0x2d0>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	60cb      	str	r3, [r1, #12]
 8001130:	e006      	b.n	8001140 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <HAL_GPIO_Init+0x2d0>)
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	43db      	mvns	r3, r3
 800113a:	491e      	ldr	r1, [pc, #120]	; (80011b4 <HAL_GPIO_Init+0x2d0>)
 800113c:	4013      	ands	r3, r2
 800113e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d006      	beq.n	800115a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_GPIO_Init+0x2d0>)
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	4918      	ldr	r1, [pc, #96]	; (80011b4 <HAL_GPIO_Init+0x2d0>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	604b      	str	r3, [r1, #4]
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800115a:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_GPIO_Init+0x2d0>)
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	43db      	mvns	r3, r3
 8001162:	4914      	ldr	r1, [pc, #80]	; (80011b4 <HAL_GPIO_Init+0x2d0>)
 8001164:	4013      	ands	r3, r2
 8001166:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d021      	beq.n	80011b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <HAL_GPIO_Init+0x2d0>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	490e      	ldr	r1, [pc, #56]	; (80011b4 <HAL_GPIO_Init+0x2d0>)
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	600b      	str	r3, [r1, #0]
 8001180:	e021      	b.n	80011c6 <HAL_GPIO_Init+0x2e2>
 8001182:	bf00      	nop
 8001184:	10320000 	.word	0x10320000
 8001188:	10310000 	.word	0x10310000
 800118c:	10220000 	.word	0x10220000
 8001190:	10210000 	.word	0x10210000
 8001194:	10120000 	.word	0x10120000
 8001198:	10110000 	.word	0x10110000
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010000 	.word	0x40010000
 80011a4:	40010800 	.word	0x40010800
 80011a8:	40010c00 	.word	0x40010c00
 80011ac:	40011000 	.word	0x40011000
 80011b0:	40011400 	.word	0x40011400
 80011b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_GPIO_Init+0x304>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	43db      	mvns	r3, r3
 80011c0:	4909      	ldr	r1, [pc, #36]	; (80011e8 <HAL_GPIO_Init+0x304>)
 80011c2:	4013      	ands	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	3301      	adds	r3, #1
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d2:	fa22 f303 	lsr.w	r3, r2, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f47f ae8e 	bne.w	8000ef8 <HAL_GPIO_Init+0x14>
  }
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	372c      	adds	r7, #44	; 0x2c
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	40010400 	.word	0x40010400

080011ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011fc:	787b      	ldrb	r3, [r7, #1]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001208:	e003      	b.n	8001212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	041a      	lsls	r2, r3, #16
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	611a      	str	r2, [r3, #16]
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e12b      	b.n	8001486 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d106      	bne.n	8001248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fc52 	bl	8000aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2224      	movs	r2, #36	; 0x24
 800124c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800126e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800127e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001280:	f001 f960 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 8001284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	4a81      	ldr	r2, [pc, #516]	; (8001490 <HAL_I2C_Init+0x274>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d807      	bhi.n	80012a0 <HAL_I2C_Init+0x84>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4a80      	ldr	r2, [pc, #512]	; (8001494 <HAL_I2C_Init+0x278>)
 8001294:	4293      	cmp	r3, r2
 8001296:	bf94      	ite	ls
 8001298:	2301      	movls	r3, #1
 800129a:	2300      	movhi	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	e006      	b.n	80012ae <HAL_I2C_Init+0x92>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4a7d      	ldr	r2, [pc, #500]	; (8001498 <HAL_I2C_Init+0x27c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	bf94      	ite	ls
 80012a8:	2301      	movls	r3, #1
 80012aa:	2300      	movhi	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e0e7      	b.n	8001486 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4a78      	ldr	r2, [pc, #480]	; (800149c <HAL_I2C_Init+0x280>)
 80012ba:	fba2 2303 	umull	r2, r3, r2, r3
 80012be:	0c9b      	lsrs	r3, r3, #18
 80012c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4a6a      	ldr	r2, [pc, #424]	; (8001490 <HAL_I2C_Init+0x274>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d802      	bhi.n	80012f0 <HAL_I2C_Init+0xd4>
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3301      	adds	r3, #1
 80012ee:	e009      	b.n	8001304 <HAL_I2C_Init+0xe8>
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	4a69      	ldr	r2, [pc, #420]	; (80014a0 <HAL_I2C_Init+0x284>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	3301      	adds	r3, #1
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	430b      	orrs	r3, r1
 800130a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001316:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	495c      	ldr	r1, [pc, #368]	; (8001490 <HAL_I2C_Init+0x274>)
 8001320:	428b      	cmp	r3, r1
 8001322:	d819      	bhi.n	8001358 <HAL_I2C_Init+0x13c>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	1e59      	subs	r1, r3, #1
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001332:	1c59      	adds	r1, r3, #1
 8001334:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001338:	400b      	ands	r3, r1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00a      	beq.n	8001354 <HAL_I2C_Init+0x138>
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1e59      	subs	r1, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fbb1 f3f3 	udiv	r3, r1, r3
 800134c:	3301      	adds	r3, #1
 800134e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001352:	e051      	b.n	80013f8 <HAL_I2C_Init+0x1dc>
 8001354:	2304      	movs	r3, #4
 8001356:	e04f      	b.n	80013f8 <HAL_I2C_Init+0x1dc>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d111      	bne.n	8001384 <HAL_I2C_Init+0x168>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	1e58      	subs	r0, r3, #1
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6859      	ldr	r1, [r3, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	440b      	add	r3, r1
 800136e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001372:	3301      	adds	r3, #1
 8001374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001378:	2b00      	cmp	r3, #0
 800137a:	bf0c      	ite	eq
 800137c:	2301      	moveq	r3, #1
 800137e:	2300      	movne	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	e012      	b.n	80013aa <HAL_I2C_Init+0x18e>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	1e58      	subs	r0, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6859      	ldr	r1, [r3, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	0099      	lsls	r1, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	fbb0 f3f3 	udiv	r3, r0, r3
 800139a:	3301      	adds	r3, #1
 800139c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf0c      	ite	eq
 80013a4:	2301      	moveq	r3, #1
 80013a6:	2300      	movne	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_I2C_Init+0x196>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e022      	b.n	80013f8 <HAL_I2C_Init+0x1dc>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10e      	bne.n	80013d8 <HAL_I2C_Init+0x1bc>
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1e58      	subs	r0, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6859      	ldr	r1, [r3, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	440b      	add	r3, r1
 80013c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80013cc:	3301      	adds	r3, #1
 80013ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d6:	e00f      	b.n	80013f8 <HAL_I2C_Init+0x1dc>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	1e58      	subs	r0, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6859      	ldr	r1, [r3, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	0099      	lsls	r1, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ee:	3301      	adds	r3, #1
 80013f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	6809      	ldr	r1, [r1, #0]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69da      	ldr	r2, [r3, #28]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001426:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6911      	ldr	r1, [r2, #16]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68d2      	ldr	r2, [r2, #12]
 8001432:	4311      	orrs	r1, r2
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	430b      	orrs	r3, r1
 800143a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695a      	ldr	r2, [r3, #20]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2220      	movs	r2, #32
 8001472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	000186a0 	.word	0x000186a0
 8001494:	001e847f 	.word	0x001e847f
 8001498:	003d08ff 	.word	0x003d08ff
 800149c:	431bde83 	.word	0x431bde83
 80014a0:	10624dd3 	.word	0x10624dd3

080014a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	461a      	mov	r2, r3
 80014b0:	460b      	mov	r3, r1
 80014b2:	817b      	strh	r3, [r7, #10]
 80014b4:	4613      	mov	r3, r2
 80014b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014b8:	f7ff fc02 	bl	8000cc0 <HAL_GetTick>
 80014bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b20      	cmp	r3, #32
 80014c8:	f040 80e0 	bne.w	800168c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2319      	movs	r3, #25
 80014d2:	2201      	movs	r2, #1
 80014d4:	4970      	ldr	r1, [pc, #448]	; (8001698 <HAL_I2C_Master_Transmit+0x1f4>)
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 fa92 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80014e2:	2302      	movs	r3, #2
 80014e4:	e0d3      	b.n	800168e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_I2C_Master_Transmit+0x50>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e0cc      	b.n	800168e <HAL_I2C_Master_Transmit+0x1ea>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b01      	cmp	r3, #1
 8001508:	d007      	beq.n	800151a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0201 	orr.w	r2, r2, #1
 8001518:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001528:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2221      	movs	r2, #33	; 0x21
 800152e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2210      	movs	r2, #16
 8001536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	893a      	ldrh	r2, [r7, #8]
 800154a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001550:	b29a      	uxth	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4a50      	ldr	r2, [pc, #320]	; (800169c <HAL_I2C_Master_Transmit+0x1f8>)
 800155a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800155c:	8979      	ldrh	r1, [r7, #10]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	6a3a      	ldr	r2, [r7, #32]
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f000 f9ca 	bl	80018fc <I2C_MasterRequestWrite>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e08d      	b.n	800168e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001588:	e066      	b.n	8001658 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	6a39      	ldr	r1, [r7, #32]
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f000 fb50 	bl	8001c34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00d      	beq.n	80015b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d107      	bne.n	80015b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e06b      	b.n	800168e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	1c5a      	adds	r2, r3, #1
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	3b01      	subs	r3, #1
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015de:	3b01      	subs	r3, #1
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d11b      	bne.n	800162c <HAL_I2C_Master_Transmit+0x188>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d017      	beq.n	800162c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	781a      	ldrb	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001616:	b29b      	uxth	r3, r3
 8001618:	3b01      	subs	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001624:	3b01      	subs	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	6a39      	ldr	r1, [r7, #32]
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f000 fb47 	bl	8001cc4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00d      	beq.n	8001658 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	2b04      	cmp	r3, #4
 8001642:	d107      	bne.n	8001654 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001652:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e01a      	b.n	800168e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165c:	2b00      	cmp	r3, #0
 800165e:	d194      	bne.n	800158a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800166e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2220      	movs	r2, #32
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	e000      	b.n	800168e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800168c:	2302      	movs	r3, #2
  }
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	00100002 	.word	0x00100002
 800169c:	ffff0000 	.word	0xffff0000

080016a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	607a      	str	r2, [r7, #4]
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	460b      	mov	r3, r1
 80016ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff fb06 	bl	8000cc0 <HAL_GetTick>
 80016b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b20      	cmp	r3, #32
 80016c4:	f040 8111 	bne.w	80018ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2319      	movs	r3, #25
 80016ce:	2201      	movs	r2, #1
 80016d0:	4988      	ldr	r1, [pc, #544]	; (80018f4 <HAL_I2C_IsDeviceReady+0x254>)
 80016d2:	68f8      	ldr	r0, [r7, #12]
 80016d4:	f000 f994 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80016de:	2302      	movs	r3, #2
 80016e0:	e104      	b.n	80018ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_I2C_IsDeviceReady+0x50>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e0fd      	b.n	80018ec <HAL_I2C_IsDeviceReady+0x24c>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b01      	cmp	r3, #1
 8001704:	d007      	beq.n	8001716 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f042 0201 	orr.w	r2, r2, #1
 8001714:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001724:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2224      	movs	r2, #36	; 0x24
 800172a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4a70      	ldr	r2, [pc, #448]	; (80018f8 <HAL_I2C_IsDeviceReady+0x258>)
 8001738:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001748:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	2200      	movs	r2, #0
 8001752:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f952 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00d      	beq.n	800177e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001770:	d103      	bne.n	800177a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e0b6      	b.n	80018ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800177e:	897b      	ldrh	r3, [r7, #10]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800178c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800178e:	f7ff fa97 	bl	8000cc0 <HAL_GetTick>
 8001792:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b02      	cmp	r3, #2
 80017a0:	bf0c      	ite	eq
 80017a2:	2301      	moveq	r3, #1
 80017a4:	2300      	movne	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017b8:	bf0c      	ite	eq
 80017ba:	2301      	moveq	r3, #1
 80017bc:	2300      	movne	r3, #0
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80017c2:	e025      	b.n	8001810 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017c4:	f7ff fa7c 	bl	8000cc0 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d302      	bcc.n	80017da <HAL_I2C_IsDeviceReady+0x13a>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	22a0      	movs	r2, #160	; 0xa0
 80017de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	bf0c      	ite	eq
 80017f0:	2301      	moveq	r3, #1
 80017f2:	2300      	movne	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001806:	bf0c      	ite	eq
 8001808:	2301      	moveq	r3, #1
 800180a:	2300      	movne	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2ba0      	cmp	r3, #160	; 0xa0
 800181a:	d005      	beq.n	8001828 <HAL_I2C_IsDeviceReady+0x188>
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <HAL_I2C_IsDeviceReady+0x188>
 8001822:	7dbb      	ldrb	r3, [r7, #22]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0cd      	beq.n	80017c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2220      	movs	r2, #32
 800182c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b02      	cmp	r3, #2
 800183c:	d129      	bne.n	8001892 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800184c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2319      	movs	r3, #25
 800186a:	2201      	movs	r2, #1
 800186c:	4921      	ldr	r1, [pc, #132]	; (80018f4 <HAL_I2C_IsDeviceReady+0x254>)
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f8c6 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e036      	b.n	80018ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2220      	movs	r2, #32
 8001882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e02c      	b.n	80018ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2319      	movs	r3, #25
 80018b2:	2201      	movs	r2, #1
 80018b4:	490f      	ldr	r1, [pc, #60]	; (80018f4 <HAL_I2C_IsDeviceReady+0x254>)
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f8a2 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e012      	b.n	80018ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	3301      	adds	r3, #1
 80018ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	f4ff af32 	bcc.w	800173a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2220      	movs	r2, #32
 80018da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80018ea:	2302      	movs	r3, #2
  }
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	00100002 	.word	0x00100002
 80018f8:	ffff0000 	.word	0xffff0000

080018fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af02      	add	r7, sp, #8
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	460b      	mov	r3, r1
 800190a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b08      	cmp	r3, #8
 8001916:	d006      	beq.n	8001926 <I2C_MasterRequestWrite+0x2a>
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d003      	beq.n	8001926 <I2C_MasterRequestWrite+0x2a>
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001924:	d108      	bne.n	8001938 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e00b      	b.n	8001950 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	2b12      	cmp	r3, #18
 800193e:	d107      	bne.n	8001950 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800194e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 f84f 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00d      	beq.n	8001984 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001976:	d103      	bne.n	8001980 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e035      	b.n	80019f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800198c:	d108      	bne.n	80019a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800198e:	897b      	ldrh	r3, [r7, #10]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	461a      	mov	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	e01b      	b.n	80019d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019a0:	897b      	ldrh	r3, [r7, #10]
 80019a2:	11db      	asrs	r3, r3, #7
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f003 0306 	and.w	r3, r3, #6
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f063 030f 	orn	r3, r3, #15
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	490e      	ldr	r1, [pc, #56]	; (80019f8 <I2C_MasterRequestWrite+0xfc>)
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 f898 	bl	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e010      	b.n	80019f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019ce:	897b      	ldrh	r3, [r7, #10]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4907      	ldr	r1, [pc, #28]	; (80019fc <I2C_MasterRequestWrite+0x100>)
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 f888 	bl	8001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	00010008 	.word	0x00010008
 80019fc:	00010002 	.word	0x00010002

08001a00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a10:	e048      	b.n	8001aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a18:	d044      	beq.n	8001aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a1a:	f7ff f951 	bl	8000cc0 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d302      	bcc.n	8001a30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d139      	bne.n	8001aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	0c1b      	lsrs	r3, r3, #16
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d10d      	bne.n	8001a56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	43da      	mvns	r2, r3
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	4013      	ands	r3, r2
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bf0c      	ite	eq
 8001a4c:	2301      	moveq	r3, #1
 8001a4e:	2300      	movne	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	e00c      	b.n	8001a70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	43da      	mvns	r2, r3
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	4013      	ands	r3, r2
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d116      	bne.n	8001aa4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	f043 0220 	orr.w	r2, r3, #32
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e023      	b.n	8001aec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	0c1b      	lsrs	r3, r3, #16
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d10d      	bne.n	8001aca <I2C_WaitOnFlagUntilTimeout+0xca>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	43da      	mvns	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	e00c      	b.n	8001ae4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	43da      	mvns	r2, r3
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d093      	beq.n	8001a12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b02:	e071      	b.n	8001be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b12:	d123      	bne.n	8001b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f043 0204 	orr.w	r2, r3, #4
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e067      	b.n	8001c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b62:	d041      	beq.n	8001be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b64:	f7ff f8ac 	bl	8000cc0 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d302      	bcc.n	8001b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d136      	bne.n	8001be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	0c1b      	lsrs	r3, r3, #16
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d10c      	bne.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	bf14      	ite	ne
 8001b96:	2301      	movne	r3, #1
 8001b98:	2300      	moveq	r3, #0
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	e00b      	b.n	8001bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	43da      	mvns	r2, r3
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf14      	ite	ne
 8001bb0:	2301      	movne	r3, #1
 8001bb2:	2300      	moveq	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d016      	beq.n	8001be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f043 0220 	orr.w	r2, r3, #32
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e021      	b.n	8001c2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d10c      	bne.n	8001c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	695b      	ldr	r3, [r3, #20]
 8001bf8:	43da      	mvns	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf14      	ite	ne
 8001c04:	2301      	movne	r3, #1
 8001c06:	2300      	moveq	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	e00b      	b.n	8001c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4013      	ands	r3, r2
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bf14      	ite	ne
 8001c1e:	2301      	movne	r3, #1
 8001c20:	2300      	moveq	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f47f af6d 	bne.w	8001b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c40:	e034      	b.n	8001cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f886 	bl	8001d54 <I2C_IsAcknowledgeFailed>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e034      	b.n	8001cbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c58:	d028      	beq.n	8001cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c5a:	f7ff f831 	bl	8000cc0 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	68ba      	ldr	r2, [r7, #8]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d302      	bcc.n	8001c70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d11d      	bne.n	8001cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7a:	2b80      	cmp	r3, #128	; 0x80
 8001c7c:	d016      	beq.n	8001cac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f043 0220 	orr.w	r2, r3, #32
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e007      	b.n	8001cbc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb6:	2b80      	cmp	r3, #128	; 0x80
 8001cb8:	d1c3      	bne.n	8001c42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cd0:	e034      	b.n	8001d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 f83e 	bl	8001d54 <I2C_IsAcknowledgeFailed>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e034      	b.n	8001d4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ce8:	d028      	beq.n	8001d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cea:	f7fe ffe9 	bl	8000cc0 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	68ba      	ldr	r2, [r7, #8]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d302      	bcc.n	8001d00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d11d      	bne.n	8001d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d016      	beq.n	8001d3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f043 0220 	orr.w	r2, r3, #32
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e007      	b.n	8001d4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d1c3      	bne.n	8001cd2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6a:	d11b      	bne.n	8001da4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f043 0204 	orr.w	r2, r3, #4
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e272      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8087 	beq.w	8001ede <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd0:	4b92      	ldr	r3, [pc, #584]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d00c      	beq.n	8001df6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ddc:	4b8f      	ldr	r3, [pc, #572]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d112      	bne.n	8001e0e <HAL_RCC_OscConfig+0x5e>
 8001de8:	4b8c      	ldr	r3, [pc, #560]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d10b      	bne.n	8001e0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df6:	4b89      	ldr	r3, [pc, #548]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d06c      	beq.n	8001edc <HAL_RCC_OscConfig+0x12c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d168      	bne.n	8001edc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e24c      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x76>
 8001e18:	4b80      	ldr	r3, [pc, #512]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a7f      	ldr	r2, [pc, #508]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e02e      	b.n	8001e84 <HAL_RCC_OscConfig+0xd4>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x98>
 8001e2e:	4b7b      	ldr	r3, [pc, #492]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a7a      	ldr	r2, [pc, #488]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	4b78      	ldr	r3, [pc, #480]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a77      	ldr	r2, [pc, #476]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e01d      	b.n	8001e84 <HAL_RCC_OscConfig+0xd4>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0xbc>
 8001e52:	4b72      	ldr	r3, [pc, #456]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a71      	ldr	r2, [pc, #452]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b6f      	ldr	r3, [pc, #444]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a6e      	ldr	r2, [pc, #440]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e00b      	b.n	8001e84 <HAL_RCC_OscConfig+0xd4>
 8001e6c:	4b6b      	ldr	r3, [pc, #428]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a6a      	ldr	r2, [pc, #424]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b68      	ldr	r3, [pc, #416]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a67      	ldr	r2, [pc, #412]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d013      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7fe ff18 	bl	8000cc0 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e94:	f7fe ff14 	bl	8000cc0 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e200      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	4b5d      	ldr	r3, [pc, #372]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0xe4>
 8001eb2:	e014      	b.n	8001ede <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7fe ff04 	bl	8000cc0 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7fe ff00 	bl	8000cc0 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	; 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e1ec      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ece:	4b53      	ldr	r3, [pc, #332]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x10c>
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d063      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eea:	4b4c      	ldr	r3, [pc, #304]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00b      	beq.n	8001f0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ef6:	4b49      	ldr	r3, [pc, #292]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d11c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x18c>
 8001f02:	4b46      	ldr	r3, [pc, #280]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d116      	bne.n	8001f3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0e:	4b43      	ldr	r3, [pc, #268]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <HAL_RCC_OscConfig+0x176>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d001      	beq.n	8001f26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e1c0      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f26:	4b3d      	ldr	r3, [pc, #244]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4939      	ldr	r1, [pc, #228]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3a:	e03a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d020      	beq.n	8001f86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f44:	4b36      	ldr	r3, [pc, #216]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7fe feb9 	bl	8000cc0 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f52:	f7fe feb5 	bl	8000cc0 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e1a1      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f64:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f70:	4b2a      	ldr	r3, [pc, #168]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4927      	ldr	r1, [pc, #156]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
 8001f84:	e015      	b.n	8001fb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7fe fe98 	bl	8000cc0 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f94:	f7fe fe94 	bl	8000cc0 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e180      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d03a      	beq.n	8002034 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d019      	beq.n	8001ffa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fcc:	f7fe fe78 	bl	8000cc0 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd4:	f7fe fe74 	bl	8000cc0 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e160      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f000 faba 	bl	800256c <RCC_Delay>
 8001ff8:	e01c      	b.n	8002034 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002000:	f7fe fe5e 	bl	8000cc0 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002006:	e00f      	b.n	8002028 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002008:	f7fe fe5a 	bl	8000cc0 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d908      	bls.n	8002028 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e146      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	42420000 	.word	0x42420000
 8002024:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002028:	4b92      	ldr	r3, [pc, #584]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1e9      	bne.n	8002008 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80a6 	beq.w	800218e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002046:	4b8b      	ldr	r3, [pc, #556]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10d      	bne.n	800206e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b88      	ldr	r3, [pc, #544]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	4a87      	ldr	r2, [pc, #540]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	61d3      	str	r3, [r2, #28]
 800205e:	4b85      	ldr	r3, [pc, #532]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206a:	2301      	movs	r3, #1
 800206c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	4b82      	ldr	r3, [pc, #520]	; (8002278 <HAL_RCC_OscConfig+0x4c8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d118      	bne.n	80020ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207a:	4b7f      	ldr	r3, [pc, #508]	; (8002278 <HAL_RCC_OscConfig+0x4c8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a7e      	ldr	r2, [pc, #504]	; (8002278 <HAL_RCC_OscConfig+0x4c8>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002086:	f7fe fe1b 	bl	8000cc0 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208e:	f7fe fe17 	bl	8000cc0 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b64      	cmp	r3, #100	; 0x64
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e103      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	4b75      	ldr	r3, [pc, #468]	; (8002278 <HAL_RCC_OscConfig+0x4c8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x312>
 80020b4:	4b6f      	ldr	r3, [pc, #444]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4a6e      	ldr	r2, [pc, #440]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6213      	str	r3, [r2, #32]
 80020c0:	e02d      	b.n	800211e <HAL_RCC_OscConfig+0x36e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x334>
 80020ca:	4b6a      	ldr	r3, [pc, #424]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	4a69      	ldr	r2, [pc, #420]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	6213      	str	r3, [r2, #32]
 80020d6:	4b67      	ldr	r3, [pc, #412]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4a66      	ldr	r2, [pc, #408]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	f023 0304 	bic.w	r3, r3, #4
 80020e0:	6213      	str	r3, [r2, #32]
 80020e2:	e01c      	b.n	800211e <HAL_RCC_OscConfig+0x36e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d10c      	bne.n	8002106 <HAL_RCC_OscConfig+0x356>
 80020ec:	4b61      	ldr	r3, [pc, #388]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4a60      	ldr	r2, [pc, #384]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6213      	str	r3, [r2, #32]
 80020f8:	4b5e      	ldr	r3, [pc, #376]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a5d      	ldr	r2, [pc, #372]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	e00b      	b.n	800211e <HAL_RCC_OscConfig+0x36e>
 8002106:	4b5b      	ldr	r3, [pc, #364]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4a5a      	ldr	r2, [pc, #360]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	6213      	str	r3, [r2, #32]
 8002112:	4b58      	ldr	r3, [pc, #352]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a57      	ldr	r2, [pc, #348]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	f023 0304 	bic.w	r3, r3, #4
 800211c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d015      	beq.n	8002152 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7fe fdcb 	bl	8000cc0 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe fdc7 	bl	8000cc0 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	; 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0b1      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	4b4b      	ldr	r3, [pc, #300]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0ee      	beq.n	800212e <HAL_RCC_OscConfig+0x37e>
 8002150:	e014      	b.n	800217c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002152:	f7fe fdb5 	bl	8000cc0 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7fe fdb1 	bl	8000cc0 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	; 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e09b      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002170:	4b40      	ldr	r3, [pc, #256]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ee      	bne.n	800215a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800217c:	7dfb      	ldrb	r3, [r7, #23]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d105      	bne.n	800218e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002182:	4b3c      	ldr	r3, [pc, #240]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	4a3b      	ldr	r2, [pc, #236]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 8087 	beq.w	80022a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002198:	4b36      	ldr	r3, [pc, #216]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d061      	beq.n	8002268 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d146      	bne.n	800223a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ac:	4b33      	ldr	r3, [pc, #204]	; (800227c <HAL_RCC_OscConfig+0x4cc>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7fe fd85 	bl	8000cc0 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ba:	f7fe fd81 	bl	8000cc0 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e06d      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021cc:	4b29      	ldr	r3, [pc, #164]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d108      	bne.n	80021f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021e2:	4b24      	ldr	r3, [pc, #144]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	4921      	ldr	r1, [pc, #132]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a19      	ldr	r1, [r3, #32]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	430b      	orrs	r3, r1
 8002206:	491b      	ldr	r1, [pc, #108]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <HAL_RCC_OscConfig+0x4cc>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7fe fd55 	bl	8000cc0 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe fd51 	bl	8000cc0 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e03d      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x46a>
 8002238:	e035      	b.n	80022a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_RCC_OscConfig+0x4cc>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe fd3e 	bl	8000cc0 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002248:	f7fe fd3a 	bl	8000cc0 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e026      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x498>
 8002266:	e01e      	b.n	80022a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d107      	bne.n	8002280 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e019      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
 8002274:	40021000 	.word	0x40021000
 8002278:	40007000 	.word	0x40007000
 800227c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_OscConfig+0x500>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	429a      	cmp	r2, r3
 8002292:	d106      	bne.n	80022a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d001      	beq.n	80022a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000

080022b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0d0      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d910      	bls.n	80022f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b67      	ldr	r3, [pc, #412]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 0207 	bic.w	r2, r3, #7
 80022de:	4965      	ldr	r1, [pc, #404]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	4b63      	ldr	r3, [pc, #396]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d001      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0b8      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d020      	beq.n	8002346 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002310:	4b59      	ldr	r3, [pc, #356]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a58      	ldr	r2, [pc, #352]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002316:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800231a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0308 	and.w	r3, r3, #8
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002328:	4b53      	ldr	r3, [pc, #332]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a52      	ldr	r2, [pc, #328]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800232e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002332:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002334:	4b50      	ldr	r3, [pc, #320]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	494d      	ldr	r1, [pc, #308]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d040      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	4b47      	ldr	r3, [pc, #284]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d115      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e07f      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002372:	4b41      	ldr	r3, [pc, #260]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e073      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002382:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e06b      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002392:	4b39      	ldr	r3, [pc, #228]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f023 0203 	bic.w	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4936      	ldr	r1, [pc, #216]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a4:	f7fe fc8c 	bl	8000cc0 <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ac:	f7fe fc88 	bl	8000cc0 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e053      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 020c 	and.w	r2, r3, #12
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d1eb      	bne.n	80023ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d210      	bcs.n	8002404 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 0207 	bic.w	r2, r3, #7
 80023ea:	4922      	ldr	r1, [pc, #136]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e032      	b.n	800246a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4916      	ldr	r1, [pc, #88]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d009      	beq.n	8002442 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	490e      	ldr	r1, [pc, #56]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002442:	f000 f821 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 8002446:	4602      	mov	r2, r0
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	490a      	ldr	r1, [pc, #40]	; (800247c <HAL_RCC_ClockConfig+0x1c8>)
 8002454:	5ccb      	ldrb	r3, [r1, r3]
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	4a09      	ldr	r2, [pc, #36]	; (8002480 <HAL_RCC_ClockConfig+0x1cc>)
 800245c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800245e:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_RCC_ClockConfig+0x1d0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fbea 	bl	8000c3c <HAL_InitTick>

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40022000 	.word	0x40022000
 8002478:	40021000 	.word	0x40021000
 800247c:	080047a0 	.word	0x080047a0
 8002480:	20000010 	.word	0x20000010
 8002484:	20000014 	.word	0x20000014

08002488 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	2300      	movs	r3, #0
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024a2:	4b1e      	ldr	r3, [pc, #120]	; (800251c <HAL_RCC_GetSysClockFreq+0x94>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d002      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x30>
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d003      	beq.n	80024be <HAL_RCC_GetSysClockFreq+0x36>
 80024b6:	e027      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ba:	613b      	str	r3, [r7, #16]
      break;
 80024bc:	e027      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	0c9b      	lsrs	r3, r3, #18
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	4a17      	ldr	r2, [pc, #92]	; (8002524 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024c8:	5cd3      	ldrb	r3, [r2, r3]
 80024ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d010      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_RCC_GetSysClockFreq+0x94>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	0c5b      	lsrs	r3, r3, #17
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	4a11      	ldr	r2, [pc, #68]	; (8002528 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024e2:	5cd3      	ldrb	r3, [r2, r3]
 80024e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <HAL_RCC_GetSysClockFreq+0x98>)
 80024ea:	fb03 f202 	mul.w	r2, r3, r2
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	e004      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a0c      	ldr	r2, [pc, #48]	; (800252c <HAL_RCC_GetSysClockFreq+0xa4>)
 80024fc:	fb02 f303 	mul.w	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	613b      	str	r3, [r7, #16]
      break;
 8002506:	e002      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_RCC_GetSysClockFreq+0x98>)
 800250a:	613b      	str	r3, [r7, #16]
      break;
 800250c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250e:	693b      	ldr	r3, [r7, #16]
}
 8002510:	4618      	mov	r0, r3
 8002512:	371c      	adds	r7, #28
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	007a1200 	.word	0x007a1200
 8002524:	080047b8 	.word	0x080047b8
 8002528:	080047c8 	.word	0x080047c8
 800252c:	003d0900 	.word	0x003d0900

08002530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002534:	4b02      	ldr	r3, [pc, #8]	; (8002540 <HAL_RCC_GetHCLKFreq+0x10>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	20000010 	.word	0x20000010

08002544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002548:	f7ff fff2 	bl	8002530 <HAL_RCC_GetHCLKFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	0a1b      	lsrs	r3, r3, #8
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	4903      	ldr	r1, [pc, #12]	; (8002568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	080047b0 	.word	0x080047b0

0800256c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <RCC_Delay+0x34>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <RCC_Delay+0x38>)
 800257a:	fba2 2303 	umull	r2, r3, r2, r3
 800257e:	0a5b      	lsrs	r3, r3, #9
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002588:	bf00      	nop
  }
  while (Delay --);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1e5a      	subs	r2, r3, #1
 800258e:	60fa      	str	r2, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1f9      	bne.n	8002588 <RCC_Delay+0x1c>
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	20000010 	.word	0x20000010
 80025a4:	10624dd3 	.word	0x10624dd3

080025a8 <__itoa>:
 80025a8:	1e93      	subs	r3, r2, #2
 80025aa:	2b22      	cmp	r3, #34	; 0x22
 80025ac:	b510      	push	{r4, lr}
 80025ae:	460c      	mov	r4, r1
 80025b0:	d904      	bls.n	80025bc <__itoa+0x14>
 80025b2:	2300      	movs	r3, #0
 80025b4:	461c      	mov	r4, r3
 80025b6:	700b      	strb	r3, [r1, #0]
 80025b8:	4620      	mov	r0, r4
 80025ba:	bd10      	pop	{r4, pc}
 80025bc:	2a0a      	cmp	r2, #10
 80025be:	d109      	bne.n	80025d4 <__itoa+0x2c>
 80025c0:	2800      	cmp	r0, #0
 80025c2:	da07      	bge.n	80025d4 <__itoa+0x2c>
 80025c4:	232d      	movs	r3, #45	; 0x2d
 80025c6:	700b      	strb	r3, [r1, #0]
 80025c8:	2101      	movs	r1, #1
 80025ca:	4240      	negs	r0, r0
 80025cc:	4421      	add	r1, r4
 80025ce:	f000 f805 	bl	80025dc <__utoa>
 80025d2:	e7f1      	b.n	80025b8 <__itoa+0x10>
 80025d4:	2100      	movs	r1, #0
 80025d6:	e7f9      	b.n	80025cc <__itoa+0x24>

080025d8 <itoa>:
 80025d8:	f7ff bfe6 	b.w	80025a8 <__itoa>

080025dc <__utoa>:
 80025dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025de:	b08b      	sub	sp, #44	; 0x2c
 80025e0:	4605      	mov	r5, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	466e      	mov	r6, sp
 80025e6:	4c1d      	ldr	r4, [pc, #116]	; (800265c <__utoa+0x80>)
 80025e8:	f104 0c20 	add.w	ip, r4, #32
 80025ec:	4637      	mov	r7, r6
 80025ee:	6820      	ldr	r0, [r4, #0]
 80025f0:	6861      	ldr	r1, [r4, #4]
 80025f2:	3408      	adds	r4, #8
 80025f4:	c703      	stmia	r7!, {r0, r1}
 80025f6:	4564      	cmp	r4, ip
 80025f8:	463e      	mov	r6, r7
 80025fa:	d1f7      	bne.n	80025ec <__utoa+0x10>
 80025fc:	7921      	ldrb	r1, [r4, #4]
 80025fe:	6820      	ldr	r0, [r4, #0]
 8002600:	7139      	strb	r1, [r7, #4]
 8002602:	1e91      	subs	r1, r2, #2
 8002604:	2922      	cmp	r1, #34	; 0x22
 8002606:	6038      	str	r0, [r7, #0]
 8002608:	f04f 0100 	mov.w	r1, #0
 800260c:	d904      	bls.n	8002618 <__utoa+0x3c>
 800260e:	7019      	strb	r1, [r3, #0]
 8002610:	460b      	mov	r3, r1
 8002612:	4618      	mov	r0, r3
 8002614:	b00b      	add	sp, #44	; 0x2c
 8002616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002618:	1e58      	subs	r0, r3, #1
 800261a:	4684      	mov	ip, r0
 800261c:	fbb5 f7f2 	udiv	r7, r5, r2
 8002620:	fb02 5617 	mls	r6, r2, r7, r5
 8002624:	3628      	adds	r6, #40	; 0x28
 8002626:	446e      	add	r6, sp
 8002628:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800262c:	460c      	mov	r4, r1
 800262e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8002632:	462e      	mov	r6, r5
 8002634:	42b2      	cmp	r2, r6
 8002636:	463d      	mov	r5, r7
 8002638:	f101 0101 	add.w	r1, r1, #1
 800263c:	d9ee      	bls.n	800261c <__utoa+0x40>
 800263e:	2200      	movs	r2, #0
 8002640:	545a      	strb	r2, [r3, r1]
 8002642:	1919      	adds	r1, r3, r4
 8002644:	1aa5      	subs	r5, r4, r2
 8002646:	42aa      	cmp	r2, r5
 8002648:	dae3      	bge.n	8002612 <__utoa+0x36>
 800264a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800264e:	780e      	ldrb	r6, [r1, #0]
 8002650:	3201      	adds	r2, #1
 8002652:	7006      	strb	r6, [r0, #0]
 8002654:	f801 5901 	strb.w	r5, [r1], #-1
 8002658:	e7f4      	b.n	8002644 <__utoa+0x68>
 800265a:	bf00      	nop
 800265c:	080047ca 	.word	0x080047ca

08002660 <memset>:
 8002660:	4603      	mov	r3, r0
 8002662:	4402      	add	r2, r0
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <memset+0xa>
 8002668:	4770      	bx	lr
 800266a:	f803 1b01 	strb.w	r1, [r3], #1
 800266e:	e7f9      	b.n	8002664 <memset+0x4>

08002670 <__libc_init_array>:
 8002670:	b570      	push	{r4, r5, r6, lr}
 8002672:	2600      	movs	r6, #0
 8002674:	4d0c      	ldr	r5, [pc, #48]	; (80026a8 <__libc_init_array+0x38>)
 8002676:	4c0d      	ldr	r4, [pc, #52]	; (80026ac <__libc_init_array+0x3c>)
 8002678:	1b64      	subs	r4, r4, r5
 800267a:	10a4      	asrs	r4, r4, #2
 800267c:	42a6      	cmp	r6, r4
 800267e:	d109      	bne.n	8002694 <__libc_init_array+0x24>
 8002680:	f000 f81a 	bl	80026b8 <_init>
 8002684:	2600      	movs	r6, #0
 8002686:	4d0a      	ldr	r5, [pc, #40]	; (80026b0 <__libc_init_array+0x40>)
 8002688:	4c0a      	ldr	r4, [pc, #40]	; (80026b4 <__libc_init_array+0x44>)
 800268a:	1b64      	subs	r4, r4, r5
 800268c:	10a4      	asrs	r4, r4, #2
 800268e:	42a6      	cmp	r6, r4
 8002690:	d105      	bne.n	800269e <__libc_init_array+0x2e>
 8002692:	bd70      	pop	{r4, r5, r6, pc}
 8002694:	f855 3b04 	ldr.w	r3, [r5], #4
 8002698:	4798      	blx	r3
 800269a:	3601      	adds	r6, #1
 800269c:	e7ee      	b.n	800267c <__libc_init_array+0xc>
 800269e:	f855 3b04 	ldr.w	r3, [r5], #4
 80026a2:	4798      	blx	r3
 80026a4:	3601      	adds	r6, #1
 80026a6:	e7f2      	b.n	800268e <__libc_init_array+0x1e>
 80026a8:	080047f0 	.word	0x080047f0
 80026ac:	080047f0 	.word	0x080047f0
 80026b0:	080047f0 	.word	0x080047f0
 80026b4:	080047f4 	.word	0x080047f4

080026b8 <_init>:
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ba:	bf00      	nop
 80026bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026be:	bc08      	pop	{r3}
 80026c0:	469e      	mov	lr, r3
 80026c2:	4770      	bx	lr

080026c4 <_fini>:
 80026c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c6:	bf00      	nop
 80026c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ca:	bc08      	pop	{r3}
 80026cc:	469e      	mov	lr, r3
 80026ce:	4770      	bx	lr
